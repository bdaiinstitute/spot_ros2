// Copyright 2017 Open Source Robotics Foundation, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#include "spot_msgs/msg/foot_state.hpp"
#include "spot_msgs/msg/foot_state_array.hpp"

#include "controller_interface/controller_interface.hpp"
#include "realtime_tools/realtime_publisher.hpp"

// auto-generated by generate_parameter_library
#include "spot_controllers/foot_state_broadcaster_parameters.hpp"

namespace spot_controllers {
/**
 * \brief Foot State Broadcaster for Spot's feet contacts.
 *
 * FootStateBroadcaster publishes state interfaces from ros2_control as ROS messages.
 *
 * \param interfaces Names of interfaces to publish.
 *
 * Publishes to:
 * - \b foot_states (spot_msgs::msg::FootState): Feet states
 */
class FootStateBroadcaster : public controller_interface::ControllerInterface {
 public:
  FootStateBroadcaster();

  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  controller_interface::return_type update(const rclcpp::Time& time, const rclcpp::Duration& period) override;

  controller_interface::CallbackReturn on_init() override;

  controller_interface::CallbackReturn on_configure(const rclcpp_lifecycle::State& previous_state) override;

  controller_interface::CallbackReturn on_activate(const rclcpp_lifecycle::State& previous_state) override;

  controller_interface::CallbackReturn on_deactivate(const rclcpp_lifecycle::State& previous_state) override;

 protected:
  // Optional parameters
  using Params = foot_state_broadcaster::Params;
  using ParamListener = foot_state_broadcaster::ParamListener;
  std::shared_ptr<ParamListener> param_listener_;
  Params params_;

  std::shared_ptr<rclcpp::Publisher<spot_msgs::msg::FootStateArray>> foot_state_publisher_;
  std::shared_ptr<realtime_tools::RealtimePublisher<spot_msgs::msg::FootStateArray>> realtime_foot_state_publisher_;
};

}  // namespace spot_controllers
