load("@humble//ros:defs.bzl", "ros")
load("@pip//:requirements.bzl", "all_whl_requirements_by_package", "requirement")
load("@aspect_rules_py//py:defs.bzl", "py_library", "resolutions")

exports_files(["requirements.in"])

ros.package_manifest(
    name = "pkg",
    package_name = "spot_common",
)

ros.py_library(
    name = "spot_common",
    srcs = [
        "spot_common/launch/spot_launch_helpers.py",
    ],
    imports = ["."],
    package = ":pkg",
    deps = [
        "@ros_utilities//synchros2",
        "@pip//lark",
        "@pip//pyyaml",
        "@humble//:ros-humble-launch",
        "@spot_wrapper//:pkg_py",
    ]
)

ros.py_test(
    name = "test_launch_helpers",
    srcs = ["test/pytests/test_launch_helpers.py"],
    pytest_main = False,
    deps = [
        ":resolutions_lib",
        "@ros_utilities//synchros2",
        "@pip//pytest",
        "@pip//pyyaml",
        "@pip//lark",
        ":spot_common",
    ],
    resolutions = resolutions.from_requirements(
        all_whl_requirements_by_package,
        requirement
    ),
    package_collisions = "ignore", # TODO: I think we need to understand why this is happening...
    env = {
        "ROS_LOG_DIR": ".",
    }
)

ros.py_library(
    name = "pkg_py",
    package = "pkg",
    data = [
        ":pkg"
    ],
    deps = [
        ":spot_common"
    ],
    visibility = ["//visibility:public"]
)

ros.cc_library(
    name = "pkg_cc",
    package = "pkg",
    data = [
        ":pkg",
    ],
    deps = [],
    visibility = ["//visibility:public"]
)

filegroup(
    name = "pkg_data",
    srcs = [
        ":pkg"
    ],
    visibility = ["//visibility:public"]
)